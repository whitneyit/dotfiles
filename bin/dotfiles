#!/usr/bin/env bash

# Error logging
function e_error() {
    printf "$(tput setaf 1)✘ %s$(tput sgr0)\n" "$@"
}

# Header logging
function e_header() {
    printf "$(tput setaf 5)%s$(tput sgr0)\n" "$@"
}

# Info logging
function e_info() {
    printf "$(tput setaf 6)%s$(tput sgr0)\n" "$@"
}

# Success logging
function e_success() {
    printf "$(tput setaf 2)✔ %s$(tput sgr0)\n" "$@"
}

# Warning logging
function e_warning() {
    printf "$(tput setaf 136)! %s$(tput sgr0)\n" "$@"
}

# Check to see if a `brew` formulae is installed
function formula_exists() {
    if $(brew list $1 >/dev/null); then
        return 0
    fi
    return 1
}

# Create our required folders
mkdir -p ~/Archive ~/Code ~/Dev ~/OSS ~/Work

# Check to see if we are running on a Mac
if [ "$(uname -s | grep -c Darwin)" -gt 0 ]; then

    # Check to see if we are missing Homebrew and install it if it is missing.
    # We can assume we have ruby and curl due to them being pre-installed
    if [ ! "$(type -P brew)" ]; then
        ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
    fi

    # Next we "tap" the brew versions of the standard OSX commands
    if [ ! -d "/usr/local/Library/Taps/homebrew/homebrew-dupes" ]; then
        brew tap homebrew/dupes
    fi

    # Make sure we have the most up to date version of homebrew
    e_header "Updating Homebrew..."
    brew update

    # Update any existing formulae
    brew upgrade --all

    # Determine a list of formulae to install
    declare LIST_FORMULAE
    declare -a MISSING_FORMULAE
    declare -a DESIRED_FORMULAE=(
        'coreutils'
        'git'
        'ack'
        'bash'
        'bash-completion'
        'gnu-sed'
        'grep'
        'hub'
        'tree'
        'vim'
        'wget'
    )

    # Create the `MISSING_FORMULAE` list
    for index in ${!DESIRED_FORMULAE[*]}
    do
        if ! formula_exists ${DESIRED_FORMULAE[$index]}; then
            # Store the name (and options) of every missing formula
            MISSING_FORMULAE=("${MISSING_FORMULAE[@]}" "${DESIRED_FORMULAE[$index]}")
        fi
    done

    # Install `MISSING_FORMULAE`
    if [[ "$MISSING_FORMULAE" ]]; then

        # Convert the array of missing formula into a list of space-separate strings
        LIST_FORMULAE=$( printf "%s " "${MISSING_FORMULAE[@]}" )

        # Install all missing formulae
        e_header "Installing missing Homebrew formulae..."
        brew install $LIST_FORMULAE

    fi

    # Remove outdated versions from the Cellar
    brew cleanup

    # If the shells file does not exist, create it now
    if [ ! -f /etc/shells ]; then
        touch /etc/shells
    fi

    # Now we test to see if we already have the new bash shell installed
    if grep -q "/usr/local/bin/bash" /etc/shells; then
        e_info "Brew bash already installed"

    # In this case, we need to install the shell ourselves
    else

        # Ask the user for their password
        e_header "Please enter your password to swap shells..."
        sudo -v

        # Change the permission of the `shells` file and add the newly installed
        # `bash` shell.
        sudo chown `whoami` /etc/shells
        sudo echo "/usr/local/bin/bash" >> /etc/shells

        # Change the shell for the current user
        chsh -s /usr/local/bin/bash

    fi

# Check to see if we are running on a Ubuntu box
elif [ -f /etc/os-release ] 2> /dev/null &&  [ "$(cat /etc/os-release | grep -c Ubuntu)" -gt 0 ]; then

    # Ask the user for their password
    e_header "Please enter your password to update and install apt packages"
    sudo -v

    # Make sure that we have the latest version of git
    sudo add-apt-repository ppa:git-core/ppa -y

    # Same goes for vim
    sudo add-apt-repository ppa:fcwu-tw/ppa -y

    # Update the list of available packages
    e_info "Updating package list..."
    sudo apt-get update -y

    # Install the required packages
    e_info "Installing packages..."
    sudo apt-get install curl git vim wget -y

    # Upgrade any existing packages
    e_info "Upgrading packages..."
    sudo apt-get upgrade -y

fi

# Check for git
if [ ! "$(type -P git)" ]; then
    e_error "Aborting. Git not installed"
    exit 1
fi

# Check if the `dotfiles` repo is stored within the `.dotfiles` directory.
if [ ! -d "$HOME/.dotfiles" ]; then

    # Test to see if there is a symbolic link to the directory. If this fails
    # the test then we assume that there is no dotfiles repo and that this is
    # our first time installing the repo.
    if [ ! -L "$HOME/.dotfiles" ]; then

        # If we are installing the repo into our `$HOME` folder, we do not want
        # to pollute that directory with all of our crap so we will simply
        # create a new directory named `~/.dotfiles`. This will be the directory
        # that our code is checked out into.
        if [ "$PWD" == "$HOME" ]; then
            mkdir "$HOME/.dotfiles"

        # Since we are outside the `$HOME` directoy, we will create a link to
        # this directory from `$HOME`. This way, if we `cd` into `~/.dotfiles`
        # we can ensure that we will always end up in the correct place
        else
            ln -fs "$PWD" "$HOME/.dotfiles"
        fi

    fi

fi

# Navigate into the repo
cd "$HOME/.dotfiles"

# Check to see if we already know where to find our dotfiles
if [ -z "$DOTFILES_DIRECTORY" ]; then

    # Here we define a global variable that will act as the "pointer" for where
    # our repo is located. The first line is testing to see if the repo is
    # symbolically linked to another location, and if it is, that will be the
    # value for `$DOTFILES_DIRECTORY`. Otherwise it must be in the fallback
    # location of `$HOME/.dotfiles`
    if [ -L "$HOME/.dotfiles" ]; then
        DOTFILES_DIRECTORY=$(readlink "$HOME/.dotfiles")
    else
        DOTFILES_DIRECTORY="$HOME/.dotfiles"
    fi

    # With the "pointer" now defined, we can `export` it.
    export DOTFILES_DIRECTORY

fi

# Initialize the git repository if it's missing
if [ ! -d .git ]; then

    # Fetch the repo
    e_header "Fetching repo..."
    git clone https://github.com/whitneyit/dotfiles.git temp

    # Info the user where the repo is located
    e_info "Repo located at: \"$DOTFILES_DIRECTORY\""

    # If we are running inside a `cygwin` environment, we need to change the
    # "group" on the files so that we can change the permissions of the files.
    if [ "$(uname -s | grep -c CYGWIN)" -gt 0 ]; then
        chgrp -R Users "$PWD"

    # And here we do the same for a `vagrant` environment.
    elif [ -d /home/vagrant ]; then
        chown -R vagrant:vagrant "$PWD"
    fi

    # Do some fancy footwork to move the repo into this given directory. This
    # works even if the directory is not empty, so a point of caution there...
    mv temp/.git ./.git
    rm -rf temp

    # Now we restore the repo
    git reset --hard

    # And remove old files
    git clean -dfx

    # Since this is the first time working with the repo, we need to set some
    # things up. It is for this reason, that we add our "local bin" directory to
    # the `$PATH` so that we can utilise some of its methods. This wont happen
    # every time we run a shell, this is just a once off.
    PATH="./bin:$PATH"

    # Because we will be using the `link_files` method, we need to source the
    # `utils` library.
    source ./lib/utils

    # Here we make sure that we have a `~/.bash_history` file.
    if [ ! -f "$HOME/.bash_history" ]; then
        touch "$HOME/.bash_history"
    fi

    # And same goes for a `~/.viminfo` file.
    if [ ! -f "$HOME/.viminfo" ]; then
        touch "$HOME/.viminfo"
    fi

    # As well as `~/.prev_dir
    if [ ! -f "$HOME/.prev_dir" ]; then
        touch "$HOME/.prev_dir"
    fi

    # Next we update the permissions of the three files.
    chmod 644 "$HOME/.bash_history"
    chmod 644 "$HOME/.prev_dir"
    chmod 644 "$HOME/.viminfo"

    # Now we can update the submodules.
    e_header "Fetching submodules..."
    git submodule update --recursive --init

    # This will set the appropriate tracking refs.
    git pull origin master --quiet

    # Now we can run our `link_files` script that we generate all the required
    # symbolic links between our repo directory and the `$HOME` folder.
    e_header "Linking files..."
    link_files "$PWD"

    # Now we modify the origin url to use our `ssh` address. We do this so that
    # when we modify the repo we don't have to worry about passwords
    e_info "Updating origin url..."
    git remote set-url origin git@github.com:whitneyit/dotfiles.git

    # Change the permissions again now that the we have just created some files.
    if [ "$(uname -s | grep -c CYGWIN)" -gt 0 ]; then
        chgrp -R Users .
        chgrp Users "$DOTFILES_DIRECTORY"
        chgrp Users "$HOME/.bash_history"
        chgrp Users "$HOME/.prev_dir"
        chgrp Users "$HOME/.viminfo"
    elif [ -d /home/vagrant ]; then
        chown -R vagrant:vagrant .
        chown --no-dereference vagrant:vagrant "$DOTFILES_DIRECTORY"
        chown vagrant:vagrant "$HOME/.bash_history"
        chown vagrant:vagrant "$HOME/.prev_dir"
        chown vagrant:vagrant "$HOME/.viminfo"
    fi

    # And here we confirm to the User that we have completed Installing the
    # `dotfiles` repo.
    e_success "Dotfiles install complete"
    exit 0
fi

# We reach this point if this is not our first time running the `dotfiles`
# command. We source all of our "libs".
source ./lib/utils
source ./lib/help

# Listn for "help" flags
if [[ "$1" == "-h" || "$1" == "--help" ]]; then
    run_help
    exit 0
fi

# If any other flags are passed through, we just error out. This means that we
# cannot combine flags; once flag per request.
for opt in "$@"
do
    case $opt in
        -*|--*) e_warning "Warning: invalid option $opt" ;;
    esac
done

# Stash any changes
git stash --quiet

# If no flags were passed in, then it is assumed that we need to "sync" the
# repo. This means that we abandon any local changes and do a `pull`.
e_header "Updating repo..."
git reset --hard --quiet
git pull origin master

# Look for any updates to the submodules.
e_header "Updating submodules..."
git submodule update --recursive --init
git pull origin master --quiet

# Restore any changes
git stash pop --quiet

# Relink the files
e_header "Linking files..."
link_files "$PWD"

# If we are running inside a `cygwin` environment, we need to change the
# "group" on the files so that we can change the permissions of the files.
if [ "$(uname -s | grep -c CYGWIN)" -gt 0 ]; then
    chgrp -R Users "$DOTFILES_DIRECTORY"

# And here we do the same for a `vagrant` environment.
elif [ -d /home/vagrant ]; then
    chown -R vagrant:vagrant "$DOTFILES_DIRECTORY"

# And the same again for OSX.
elif [ "$(uname -s | grep -c Darwin)" -gt 0 ]; then
    chown -R "$(whoami)":staff "$DOTFILES_DIRECTORY"

# Everything else
else
    chown -R "$(whoami)":"$(whoami)" "$DOTFILES_DIRECTORY"
fi

# And finally that's it. Repo updated!
e_success "Dotfiles update complete"
exit 0

# vim: set syn=sh :
