#!/usr/bin/env bash

# Error logging
function e_error() {
    printf "$(tput setaf 1)✘ %s$(tput sgr0)\n" "$@"
}

# Header logging
function e_header() {
    printf "$(tput setaf 5)%s$(tput sgr0)\n" "$@"
}

# Info logging
function e_info() {
    printf "$(tput setaf 6)%s$(tput sgr0)\n" "$@"
}

# Success logging
function e_success() {
    printf "$(tput setaf 2)✔ %s$(tput sgr0)\n" "$@"
}

# Warning logging
function e_warning() {
    printf "$(tput setaf 136)! %s$(tput sgr0)\n" "$@"
}

# Check to see if a `brew` formulae is installed
function formula_exists() {
    if $(brew list $1 >/dev/null); then
        return 0
    fi
    return 1
}

# Check for git
if [ ! "$(type -P git)" ]; then
    e_error "Aborting. Git not installed"
    exit 1
fi

# Check if the `dotfiles` repo is stored within the `.dotfiles` directory.
if [ ! -d "$HOME/.dotfiles" ]; then

    # Test to see if there is a symbolic link to the directory. If this fails
    # the test then we assume that there is no dotfiles repo and that this is
    # our first time installing the repo.
    if [ ! -L "$HOME/.dotfiles" ]; then

        # If we are installing the repo into our `$HOME` folder, we do not want
        # to pollute that directory with all of our crap so we will simply
        # create a new directory named `~/.dotfiles`. This will be the directory
        # that our code is checked out into.
        if [ "$PWD" == "$HOME" ]; then
            mkdir "$HOME/.dotfiles"

        # Since we are outside the `$HOME` directoy, we will create a link to
        # this directory from `$HOME`. This way, if we `cd` into `~/.dotfiles`
        # we can ensure that we will always end up in the correct place
        else
            ln -fs "$PWD" "$HOME/.dotfiles"
        fi

    fi

fi

# Check to see if we already know where to find our dotfiles
if [ -z "$DOTFILES_DIRECTORY" ]; then

    # Here we define a global variable that will act as the "pointer" for where
    # our repo is located. The first line is testing to see if the repo is
    # symbolically linked to another location, and if it is, that will be the
    # value for `$DOTFILES_DIRECTORY`. Otherwise it must be in the fallback
    # location of `$HOME/.dotfiles`
    if [ -L "$HOME/.dotfiles" ]; then
        DOTFILES_DIRECTORY=$(readlink "$HOME/.dotfiles")

    # Check if the dotfiles repo is a folder
    elif [ -d "$HOME/.dotfiles" ]; then
        DOTFILES_DIRECTORY="$HOME/.dotfiles"

    # We would end up here if we can't find the dotfiles repo
    else
        e_error "Could not locate dotfiles folder"
        exit 1
    fi

    # With the "pointer" now defined, we can `export` it.
    export DOTFILES_DIRECTORY

fi

# Navigate into the repo
cd "$DOTFILES_DIRECTORY"

# Initialize the git repository if it's missing
if [ ! -d .git ]; then

    # `is_cygwin`
    if [ "$(uname -s | grep -c Cygwin)" -gt 0 ]; then
        mkdir -p /etc/init.d /tmp
        chgrp -R Users "/etc/init.d"
        chgrp -R Users "/tmp"

    # `is_vagrant`
    elif [ -d /home/vagrant ]; then
        mkdir -p /etc/init.d /tmp
        sudo chown -R vagrant:vagrant "/etc/init.d"
        sudo chown -R vagrant:vagrant "/tmp"

    # Everyone else
    else
        e_info "Please enter your password to change ownership of /etc/init.d and /tmp..."
        sudo -v
        sudo mkdir -p /etc/init.d /tmp
        chown -R `whoami` "/etc/init.d"
        chown -R `whoami` "/tmp"

    fi

    # Create our required folders
    mkdir -p "$HOME/.config" "$HOME/.ssh" "$HOME/Archive" "$HOME/Code" "$HOME/Dev" "$HOME/go" "$HOME/OSS" "$HOME/Work"

    # Here we make sure that we have a `~/.bash_history` file.
    if [ ! -f "$HOME/.bash_history" ]; then
        touch "$HOME/.bash_history"
    fi

    # And same goes for a `~/.viminfo` file.
    if [ ! -f "$HOME/.viminfo" ]; then
        touch "$HOME/.viminfo"
    fi

    # And also for `~/.prev_dir
    if [ ! -f "$HOME/.prev_dir" ]; then
        touch "$HOME/.prev_dir"
    fi

    # As well as `~/.ssh/dump
    if [ ! -f "$HOME/.ssh/dump" ]; then
        touch "$HOME/.ssh/dump"
    fi

    # Next we update the permissions of the three files.
    chmod 644 "$HOME/.bash_history"
    chmod 644 "$HOME/.prev_dir"
    chmod 644 "$HOME/.ssh/dump"
    chmod 644 "$HOME/.viminfo"

    # Change the permissions again now that the we have just created some files.

    # `is_cygwin`
    if [ "$(uname -s | grep -c Cygwin)" -gt 0 ]; then
        chgrp -R Users .
        chgrp -R Users "$HOME/.ssh"
        chgrp -R Users "$HOME/Archive"
        chgrp -R Users "$HOME/Code"
        chgrp -R Users "$HOME/Dev"
        chgrp -R Users "$HOME/go"
        chgrp -R Users "$HOME/OSS"
        chgrp -R Users "$HOME/Work"
        chgrp Users "$HOME/.bash_history"
        chgrp Users "$HOME/.config"
        chgrp Users "$HOME/.prev_dir"
        chgrp Users "$HOME/.viminfo"

    # `is_vagrant`
    elif [ -d /home/vagrant ]; then
        sudo chown -R vagrant:vagrant .
        sudo chown -R vagrant:vagrant "$HOME/.ssh"
        sudo chown -R vagrant:vagrant "$HOME/Archive"
        sudo chown -R vagrant:vagrant "$HOME/Code"
        sudo chown -R vagrant:vagrant "$HOME/Dev"
        sudo chown -R vagrant:vagrant "$HOME/go"
        sudo chown -R vagrant:vagrant "$HOME/OSS"
        sudo chown -R vagrant:vagrant "$HOME/Work"
        sudo chown vagrant:vagrant "$HOME/.bash_history"
        sudo chown vagrant:vagrant "$HOME/.config"
        sudo chown vagrant:vagrant "$HOME/.prev_dir"
        sudo chown vagrant:vagrant "$HOME/.viminfo"

    # Everyone else
    else
        chown -R `whoami` .
        chown -R `whoami` "$HOME/.ssh"
        chown -R `whoami` "$HOME/Archive"
        chown -R `whoami` "$HOME/Code"
        chown -R `whoami` "$HOME/Dev"
        chown -R `whoami` "$HOME/go"
        chown -R `whoami` "$HOME/OSS"
        chown -R `whoami` "$HOME/Work"
        chown `whoami` "$HOME/.bash_history"
        chown `whoami` "$HOME/.config"
        chown `whoami` "$HOME/.prev_dir"
        chown `whoami` "$HOME/.viminfo"
    fi

    # Fetch the repo
    e_header "Fetching repo..."
    git clone https://github.com/whitneyit/dotfiles.git temp

    # Info the user where the repo is located
    e_info "Repo located at: \"$DOTFILES_DIRECTORY\""

    # Do some fancy footwork to move the repo into this given directory. This
    # works even if the directory is not empty, so a point of caution there...
    mv temp/.git ./.git
    rm -rf temp

    # Now we restore the repo
    git reset --hard

    # And remove old files
    git clean -dfx

    # We now need to change the permissions of the files.

    # `is_cygwin`
    if [ "$(uname -s | grep -c Cygwin)" -gt 0 ]; then
        chgrp -R Users "$DOTFILES_DIRECTORY"

    # `is_vagrant`
    elif [ -d /home/vagrant ]; then
        sudo chown -R --no-dereference vagrant:vagrant "$DOTFILES_DIRECTORY"

    # Everyone else
    else
        chown -R `whoami` "$DOTFILES_DIRECTORY"
    fi

    # Since this is the first time working with the repo, we need to set some
    # things up. It is for this reason, that we add our "local bin" directory to
    # the `$PATH` so that we can utilise some of its methods. This wont happen
    # every time we run a shell, this is just a once off.
    PATH="./bin:$PATH"

    # Because we will be using the `link_files` method, we need to source the
    # `utils` library.
    source ./lib/utils

    # Now we can update the submodules.
        e_header "Fetching submodules..."
    git submodule update --recursive --init

    # This will set the appropriate tracking refs.
    git pull origin master --quiet

    # Now we can run our `link_files` script that we generate all the required
    # symbolic links between our repo directory and the `$HOME` folder.
    e_header "Linking files..."
    link_files "$PWD"

    # Now we modify the origin url to use our `ssh` address. We do this so that
    # when we modify the repo we don't have to worry about passwords
    e_info "Updating origin url..."
    git remote set-url origin git@github.com:whitneyit/dotfiles.git

    # Ensure that we have and own the bin and go folders

    # `is_cygwin`
    if [ "$(uname -s | grep -c Cygwin)" -gt 0 ]; then
        mkdir -p /usr/local/{bin,go}
        chgrp Users "/usr/local/bin"
        chgrp Users "/usr/local/go"

    # `is_vagrant`
    elif [ -d /home/vagrant ]; then
        sudo mkdir -p /usr/local/{bin,go}
        sudo chown -R vagrant:vagrant "/usr/local/bin"
        sudo chown -R vagrant:vagrant "/usr/local/go"

    # Everyone else
    else
        e_info "Please enter your password to change ownership of /usr/local..."
        sudo -v
        sudo mkdir -p /usr/local/{bin,go}
        sudo chown -R `whoami` "/usr/local/bin"
        sudo chown -R `whoami` "/usr/local/go"
    fi

    # `is_mac`
    # Check to see if we are running on a Mac
    if [ "$(uname -s | grep -c Darwin)" -gt 0 ]; then

        # Check to see if we are missing Homebrew and install it if it is missing.
        # We can assume we have ruby and curl due to them being pre-installed
        if [ ! "$(type -P brew)" ]; then
            ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
        fi

        # Next we "tap" the brew versions of the standard OSX commands
        if [ ! -d "/usr/local/Library/Taps/homebrew/homebrew-dupes" ]; then
            brew tap homebrew/dupes
        fi

        # Make sure we have the most up to date version of homebrew
        e_header "Updating Homebrew..."
        brew update

        # Update any existing formulae
        brew upgrade --all

        # Determine a list of formulae to install
        declare LIST_FORMULAE
        declare -a MISSING_FORMULAE
        declare -a DESIRED_FORMULAE=(
            'ack'
            'bash'
            'bash-completion'
            'coreutils'
            'ctags'
            'dos2unix'
            'findutils'
            'git'
            'gnu-sed'
            'gpg'
            'grep'
            'hub'
            'tree'
            'vim'
            'wget'
        )

        # Create the `MISSING_FORMULAE` list
        for index in ${!DESIRED_FORMULAE[*]}
        do
            if ! formula_exists ${DESIRED_FORMULAE[$index]}; then
                # Store the name (and options) of every missing formula
                MISSING_FORMULAE=("${MISSING_FORMULAE[@]}" "${DESIRED_FORMULAE[$index]}")
            fi
        done

        # Install `MISSING_FORMULAE`
        if [[ "$MISSING_FORMULAE" ]]; then

            # Convert the array of missing formula into a list of space-separate strings
            LIST_FORMULAE=$( printf "%s " "${MISSING_FORMULAE[@]}" )

            # Install all missing formulae
            e_header "Installing missing Homebrew formulae..."
            brew install $LIST_FORMULAE

        fi

        # Remove outdated versions from the Cellar
        brew cleanup

        # If the shells file does not exist, create it now
        if [ ! -f /etc/shells ]; then
            touch /etc/shells
        fi

        # Now we test to see if we already have the new bash shell installed
        if grep -q "/usr/local/bin/bash" /etc/shells; then
            e_info "Brew bash already installed"

        # In this case, we need to install the shell ourselves
        else

            # Ask for the users password to change the shell
            e_info "Please enter your password to switch to new bash shell..."
            sudo -v

            # Change the permission of the `shells` file and add the newly installed
            # `bash` shell.
            sudo chown `whoami` /etc/shells
            sudo echo "/usr/local/bin/bash" >> /etc/shells

            # Change the shell for the current user
            chsh -s /usr/local/bin/bash

        fi

        # Let the user know that we have finished with the homebrew stuff
        e_success "Successfully brewed..."

    # `is_ubuntu`
    # Check to see if we are running on a Ubuntu box
    elif [ -f /etc/os-release ] 2> /dev/null &&  [ "$(cat /etc/os-release | grep -c Ubuntu)" -gt 0 ]; then

        # Ask for their password if it's not a vagrant install.
        if [ ! -d /home/vagrant ]; then
            e_info "Please enter your password to install and upgrade packages..."
            sudo -v
        fi

        # Install the `add-apt-repository` command as well as other commands
        sudo apt-get install -y --force-yes \
            python-software-properties \
            software-properties-common

        # Make sure that we have the latest version of git
        sudo add-apt-repository -y ppa:git-core/ppa

        # Same goes for vim
        sudo add-apt-repository -y ppa:fcwu-tw/ppa

        # Because vagrant boxes also pass `is_ubuntu`, we conditionally install
        # these packages because we won't be using them on a vagrant box.
        if [ ! -d /home/vagrant ]; then

            # Fixes battle.net black screen bug
            # http://jeffhoogland.blogspot.com.au/2015/01/howto-fix-battlenet-client-distortion.html
            # sudo add-apt-repository -y ppa:xorg-edgers/ppa

            # Add wine
            sudo add-apt-repository -y ppa:ubuntu-wine/ppa

            # And VLC
            sudo add-apt-repository -y ppa:videolan/stable-daily

        fi

        # Update the list of available packages
        e_info "Updating package list..."
        sudo apt-get update -y

        # Install the required packages
        e_info "Installing packages..."
        sudo apt-get install -y \
            build-essential \
            chromium-browser \
            curl \
            ctags \
            dos2unix \
            daemon \
            exuberant-ctags \
            gettext \
            git \
            lib32nss-mdns \
            libssl-dev \
            ppa-purge \
            realpath \
            tree \
            unrar rar \
            unzip zip \
            vim \
            wget \
            xclip \
            xvfb

        # Install our ubuntu only packages
        if [ ! -d /home/vagrant ]; then
            sudo apt-get install -y \
                terminator \
                software-center \
                vlc \
                wine
        fi

        # Upgrade any existing packages
        e_info "Upgrading packages..."
        sudo apt-get upgrade -y
        sudo apt-get dist-upgrade -y

        # Let the user know that we have finished with the packages
        e_success "Successfully installed packages..."

        # Only change the limits for non vagrant boxes.
        if [ ! -d /home/vagrant ]; then

            # Set the new value for ulimit
            if [ -f /etc/security/limits.conf ]; then
                sudo chown `whoami` /etc/security/limits.conf
                echo "* hard nofile 65536" >> /etc/security/limits.conf
                echo "* soft nofile 65536" >> /etc/security/limits.conf
                echo "root hard nofile 65536" >> /etc/security/limits.conf
                echo "root soft nofile 65536" >> /etc/security/limits.conf
            fi

            # Now allow the ulimit to be increased
            if [ -f /etc/pam.d/common-session ]; then
                sudo chown `whoami` /etc/pam.d/common-session
                echo "session required pam_limits.so" >> /etc/pam.d/common-session
            fi

        fi

        # Download go and move it to /usr/local
        curl https://storage.googleapis.com/golang/go1.5.2.linux-amd64.tar.gz | tar -xz -C /usr/local

        # Configure the go environment
        export GOPATH="$HOME/go"
        export GOROOT="/usr/local/go"

        # Install hub
        git clone https://github.com/github/hub.git /tmp/hub
        cd /tmp/hub
        ./script/build
        cp bin/hub /usr/local/bin/hub
        cd "$DOTFILES_DIRECTORY"

    fi

    # Check to see if nvm is installed
    if [ ! -d "$HOME/.nvm" ]; then

        # If we are running in cygwin, we can't install nvm, it has to be done
        # via a different repo
        if [ "$(uname -s | grep -c Cygwin)" -gt 0 ]; then
            e_warning "Could not install nvm. Use `https://github.com/coreybutler/nvm-windows` instead"

        # If we can install nvm we do it here
        else

            # Let the user know what is happening
            e_info "Installing nvm..."

            # First get the latest installer from master
            curl -o- https://raw.githubusercontent.com/creationix/nvm/master/install.sh | bash

            # Clean the auto aliases that nvm adds
            git checkout .

            # Load nvm
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"

            # Install node
            nvm install stable
            nvm use stable
            nvm alias default stable

            # Let the user know what version we are using
            echo nvm version $(nvm --version)
            echo node version $(node --version)
            echo npm version $(npm --version)

            # Update npm
            npm install --global npm

            # Install our most used packages
            npm install --global \
                firebase-tools \
                gulp-cli \
                httpster \
                karma-cli \
                node-inspector \
                np \
                npm-check \
                phantomjs-prebuilt \
                typescript \
                typings

            e_success "Successfully installed nvm..."

        fi

    fi

    # And here we confirm to the User that we have completed Installing the
    # `dotfiles` repo.
    e_success "Dotfiles install complete"
    exit 0

fi

# We reach this point if this is not our first time running the `dotfiles`
# command. We source all of our "libs".
source ./lib/utils
source ./lib/help

# Listn for "help" flags
if [[ "$1" == "-h" || "$1" == "--help" ]]; then
    run_help
    exit 0
fi

# If any other flags are passed through, we just error out. This means that we
# cannot combine flags; once flag per request.
for opt in "$@"
do
    case $opt in
        -*|--*) e_warning "Warning: invalid option $opt" ;;
    esac
done

# Stash any changes
git stash --quiet

# If no flags were passed in, then it is assumed that we need to "sync" the
# repo. This means that we abandon any local changes and do a `pull`.
e_header "Updating repo..."
git fetch origin master --quiet
git reset --hard --quiet origin/master

# Look for any updates to the submodules.
e_header "Updating submodules..."
git submodule update --recursive --init

# Restore any changes
git stash pop --quiet

# Relink the files
e_header "Linking files..."
link_files "$PWD"

# Update home brew if it exists
if [ "$(type -P brew)" ]; then
    e_header "Updating Homebrew..."
    brew update
fi

# Change the permissions of the dotfiles.

# `is_cygwin`
if [ "$(uname -s | grep -c Cygwin)" -gt 0 ]; then
    chgrp -R Users "$DOTFILES_DIRECTORY"

# `is_vagrant`
elif [ -d /home/vagrant ]; then
    sudo chown -R --no-dereference vagrant:vagrant "$DOTFILES_DIRECTORY"

# Everyone else
else
    chown -R `whoami` "$DOTFILES_DIRECTORY"
fi

# And finally that's it. Repo updated!
e_success "Dotfiles update complete"
exit 0

# vim: set syn=sh :
