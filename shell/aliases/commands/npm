#!/usr/bin/env bash

n-exists() {
    if [ ! "$(type -P n)" ]; then
        echo 0
    elif [ ! -f "$(type -P n)" ]; then
        echo 0
    else
        echo 1
    fi
}

pnpm-exists() {
    if [ ! "$(type -P pnpm)" ]; then
        echo 0
    elif [ ! -f "$(type -P pnpm)" ]; then
        echo 0
    else
        echo 1
    fi
}

yarn-exists() {
    if [ ! "$(type -P yarn)" ]; then
        echo 0
    elif [ ! -f "$(type -P yarn)" ]; then
        echo 0
    else
        echo 1
    fi
}

ngp() {
    readlink -f "$(which ${1:-npm})"
}

ngd() {
    path="$(ngp $1)"
    echo "$(dirname "$path")"
}

ni() {
    if [ "$#" == "0" ]; then
        echo -e "${BRIGHT_BLACK}$ npm install${RESET}"
        npm install
    else
        echo -e "${BRIGHT_BLACK}$ npm install --save --save-exact "$@"${RESET}"
        npm install --save --save-exact "$@"
    fi
}

nid() {
    echo -e "${BRIGHT_BLACK}$ npm install --save-dev --save-exact "$@"${RESET}"
    npm install --save-dev --save-exact "$@"
}

nig() {
    echo -e "${BRIGHT_BLACK}$ npm install --global --save-exact "$@"${RESET}"
    npm install --global --save-exact "$@"
}

nio() {
    if [ "$#" == "0" ]; then
        echo -e "${BRIGHT_BLACK}$ npm install --include=\"optional\"${RESET}"
        npm install --include="optional"
    else
        echo -e "${BRIGHT_BLACK}$ npm install --save-optional --save-exact "$@"${RESET}"
        npm install --save-optional --save-exact "$@"
    fi
}

nls() {
    echo -e "${BRIGHT_BLACK}$ npm list --depth=0 "$@"${RESET}"
    npm list --depth=0 "$@"
}

nlsg() {
    echo -e "${BRIGHT_BLACK}$ npm list --global --depth=0 "$@"${RESET}"
    npm list --global --depth=0 "$@"
}

nu() {
    echo -e "${BRIGHT_BLACK}$ npm uninstall "$@"${RESET}"
    npm uninstall "$@"
}

nug() {
    echo -e "${BRIGHT_BLACK}$ npm uninstall --global "$@"${RESET}"
    npm uninstall --global "$@"
}

####################
#                  #
#  npm run <task>  #
#                  #
####################

nb() {
    if [ "$#" == "0" ]; then
        echo -e "${BRIGHT_BLACK}$ npm run build${RESET}"
        npm run build
    else
        echo -e "${BRIGHT_BLACK}$ npm run build:"$@"${RESET}"
        npm run build:"$@"
    fi
}

nba() {
    if [ "$#" == "0" ]; then
        echo -e "${BRIGHT_BLACK}$ npm run build:apps${RESET}"
        npm run build:apps
    else
        echo -e "${BRIGHT_BLACK}$ npm run build:apps:"$@"${RESET}"
        npm run build:apps:"$@"
    fi
}

nbl() {
    if [ "$#" == "0" ]; then
        echo -e "${BRIGHT_BLACK}$ npm run build:libs${RESET}"
        npm run build:libs
    else
        echo -e "${BRIGHT_BLACK}$ npm run build:libs:"$@"${RESET}"
        npm run build:libs:"$@"
    fi
}

nc() {
    if [ "$#" == "0" ]; then
        echo -e "${BRIGHT_BLACK}$ npm run ci${RESET}"
        npm run ci
    else
        echo -e "${BRIGHT_BLACK}$ npm run ci:"$@"${RESET}"
        npm run ci:"$@"
    fi
}

nd() {
    if [ "$#" == "0" ]; then
        echo -e "${BRIGHT_BLACK}$ npm run dev${RESET}"
        npm run dev
    else
        echo -e "${BRIGHT_BLACK}$ npm run dev:"$@"${RESET}"
        npm run dev:"$@"
    fi
}

nf() {
    if [ "$#" == "0" ]; then
        echo -e "${BRIGHT_BLACK}$ npm run format${RESET}"
        npm run format
    else
        echo -e "${BRIGHT_BLACK}$ npm run format:"$@"${RESET}"
        npm run format:"$@"
    fi
}

nfa() {
    if [ "$#" == "0" ]; then
        echo -e "${BRIGHT_BLACK}$ npm run format:apps${RESET}"
        npm run format:apps
    else
        echo -e "${BRIGHT_BLACK}$ npm run format:apps:"$@"${RESET}"
        npm run format:apps:"$@"
    fi
}

nfl() {
    if [ "$#" == "0" ]; then
        echo -e "${BRIGHT_BLACK}$ npm run format:libs${RESET}"
        npm run format:libs
    else
        echo -e "${BRIGHT_BLACK}$ npm run format:libs:"$@"${RESET}"
        npm run format:libs:"$@"
    fi
}

nfc() {
    if [ "$#" == "0" ]; then
        echo -e "${BRIGHT_BLACK}$ npm run format-check${RESET}"
        npm run format-check
    else
        echo -e "${BRIGHT_BLACK}$ npm run format-check:"$@"${RESET}"
        npm run format-check:"$@"
    fi
}

nfca() {
    if [ "$#" == "0" ]; then
        echo -e "${BRIGHT_BLACK}$ npm run format-check:apps${RESET}"
        npm run format-check:apps
    else
        echo -e "${BRIGHT_BLACK}$ npm run format-check:apps:"$@"${RESET}"
        npm run format-check:apps:"$@"
    fi
}

nfcl() {
    if [ "$#" == "0" ]; then
        echo -e "${BRIGHT_BLACK}$ npm run format-check:libs${RESET}"
        npm run format-check:libs
    else
        echo -e "${BRIGHT_BLACK}$ npm run format-check:libs:"$@"${RESET}"
        npm run format-check:libs:"$@"
    fi
}

nfw() {
    if [ "$#" == "0" ]; then
        echo -e "${BRIGHT_BLACK}$ npm run format-write${RESET}"
        npm run format-write
    else
        echo -e "${BRIGHT_BLACK}$ npm run format-write:"$@"${RESET}"
        npm run format-write:"$@"
    fi
}

nfwa() {
    if [ "$#" == "0" ]; then
        echo -e "${BRIGHT_BLACK}$ npm run format-write:apps${RESET}"
        npm run format-write:apps
    else
        echo -e "${BRIGHT_BLACK}$ npm run format-write:apps:"$@"${RESET}"
        npm run format-write:apps:"$@"
    fi
}

nfwl() {
    if [ "$#" == "0" ]; then
        echo -e "${BRIGHT_BLACK}$ npm run format-write:libs${RESET}"
        npm run format-write:libs
    else
        echo -e "${BRIGHT_BLACK}$ npm run format-write:libs:"$@"${RESET}"
        npm run format-write:libs:"$@"
    fi
}

nl() {
    if [ "$#" == "0" ]; then
        echo -e "${BRIGHT_BLACK}$ npm run lint${RESET}"
        npm run lint
    else
        echo -e "${BRIGHT_BLACK}$ npm run lint:"$@"${RESET}"
        npm run lint:"$@"
    fi
}

nla() {
    if [ "$#" == "0" ]; then
        echo -e "${BRIGHT_BLACK}$ npm run lint:apps${RESET}"
        npm run lint:apps
    else
        echo -e "${BRIGHT_BLACK}$ npm run lint:apps:"$@"${RESET}"
        npm run lint:apps:"$@"
    fi
}

nll() {
    if [ "$#" == "0" ]; then
        echo -e "${BRIGHT_BLACK}$ npm run lint:libs${RESET}"
        npm run lint:libs
    else
        echo -e "${BRIGHT_BLACK}$ npm run lint:libs:"$@"${RESET}"
        npm run lint:libs:"$@"
    fi
}

nlc() {
    if [ "$#" == "0" ]; then
        echo -e "${BRIGHT_BLACK}$ npm run lint-check${RESET}"
        npm run lint-check
    else
        echo -e "${BRIGHT_BLACK}$ npm run lint-check:"$@"${RESET}"
        npm run lint-check:"$@"
    fi
}

nlca() {
    if [ "$#" == "0" ]; then
        echo -e "${BRIGHT_BLACK}$ npm run lint-check:apps${RESET}"
        npm run lint-check:apps
    else
        echo -e "${BRIGHT_BLACK}$ npm run lint-check:apps:"$@"${RESET}"
        npm run lint-check:apps:"$@"
    fi
}

nlcl() {
    if [ "$#" == "0" ]; then
        echo -e "${BRIGHT_BLACK}$ npm run lint-check:libs${RESET}"
        npm run lint-check:libs
    else
        echo -e "${BRIGHT_BLACK}$ npm run lint-check:libs:"$@"${RESET}"
        npm run lint-check:libs:"$@"
    fi
}

nlf() {
    if [ "$#" == "0" ]; then
        echo -e "${BRIGHT_BLACK}$ npm run lint-fix${RESET}"
        npm run lint-fix
    else
        echo -e "${BRIGHT_BLACK}$ npm run lint-fix:"$@"${RESET}"
        npm run lint-fix:"$@"
    fi
}

nlfa() {
    if [ "$#" == "0" ]; then
        echo -e "${BRIGHT_BLACK}$ npm run lint-fix:apps${RESET}"
        npm run lint-fix:apps
    else
        echo -e "${BRIGHT_BLACK}$ npm run lint-fix:apps:"$@"${RESET}"
        npm run lint-fix:apps:"$@"
    fi
}

nlfl() {
    if [ "$#" == "0" ]; then
        echo -e "${BRIGHT_BLACK}$ npm run lint-fix:libs${RESET}"
        npm run lint-fix:libs
    else
        echo -e "${BRIGHT_BLACK}$ npm run lint-fix:libs:"$@"${RESET}"
        npm run lint-fix:libs:"$@"
    fi
}

ns() {
    if [ "$#" == "0" ]; then
        echo -e "${BRIGHT_BLACK}$ npm start${RESET}"
        npm start
    else
        echo -e "${BRIGHT_BLACK}$ npm run start:"$@"${RESET}"
        npm run start:"$@"
    fi
}

nsa() {
    if [ "$#" == "0" ]; then
        echo -e "${BRIGHT_BLACK}$ npm run start:apps${RESET}"
        npm run start:apps
    else
        echo -e "${BRIGHT_BLACK}$ npm run start:apps:"$@"${RESET}"
        npm run start:apps:"$@"
    fi
}

nsl() {
    if [ "$#" == "0" ]; then
        echo -e "${BRIGHT_BLACK}$ npm run start:libs${RESET}"
        npm run start:libs
    else
        echo -e "${BRIGHT_BLACK}$ npm run start:libs:"$@"${RESET}"
        npm run start:libs:"$@"
    fi
}

nt() {
    if [ "$#" == "0" ]; then
        echo -e "${BRIGHT_BLACK}$ npm test${RESET}"
        npm test
    else
        echo -e "${BRIGHT_BLACK}$ npm run test:"$@"${RESET}"
        npm run test:"$@"
    fi
}

nta() {
    if [ "$#" == "0" ]; then
        echo -e "${BRIGHT_BLACK}$ npm run test:apps${RESET}"
        npm run test:apps
    else
        echo -e "${BRIGHT_BLACK}$ npm run test:apps:"$@"${RESET}"
        npm run test:apps:"$@"
    fi
}

ntl() {
    if [ "$#" == "0" ]; then
        echo -e "${BRIGHT_BLACK}$ npm run test:libs${RESET}"
        npm run test:libs
    else
        echo -e "${BRIGHT_BLACK}$ npm run test:libs:"$@"${RESET}"
        npm run test:libs:"$@"
    fi
}

nv() {
    if [ "$(type -P node)" ]; then
        local node_output="$(node --version)"
        local node_bin_version="${node_output##v}"
        local node_v8_version="$(node --print process.versions.v8)"
        echo -e "    ${GREEN}node${RESET} : ${node_bin_version}"
        echo -e "    ${GREEN}  v8${RESET} : ${node_v8_version}"
    else
        echo -e "    ${BLUE}node${RESET} : ${BRIGHT_BLACK}not installed${RESET}"
        echo -e "    ${BLUE}  v8${RESET} : ${BRIGHT_BLACK}not installed${RESET}"
    fi
    if [ "$(type -P npm)" ]; then
        echo -e "    ${GREEN} npm${RESET} : $(npm --version)"
    else
        echo -e "    ${BLUE} npm${RESET} : ${BRIGHT_BLACK}not installed${RESET}"
    fi
    echo ""
    if [ "$(n-exists)" == "1" ]; then
        echo -e "    ${GREEN}   n${RESET} : $(n --version)"
    else
        echo -e "    ${BLUE}   n${RESET} : ${BRIGHT_BLACK}not installed${RESET}"
    fi
    if [ "$(is_win)" == "yes" ]; then
        if [ "$(type -t nvm)" == "function" ]; then
            echo -e "    ${GREEN} nvm${RESET} : $(nvm version)"

            echo -e "    ${BLUE} nvm${RESET} : ${BRIGHT_BLACK}not installed${RESET}"
        fi
    else
        if [ "$(type -t nvm)" == "function" ]; then
            echo -e "    ${GREEN} nvm${RESET} : $(nvm --version)"
        else
            echo -e "    ${BLUE} nvm${RESET} : ${BRIGHT_BLACK}not installed${RESET}"
        fi
    fi
    if [ "$(pnpm-exists)" == "1" ]; then
        echo -e "    ${GREEN}pnpm${RESET} : $(pnpm --version)"
    else
        echo -e "    ${BLUE}pnpm${RESET} : ${BRIGHT_BLACK}not installed${RESET}"
    fi
    if [ "$(yarn-exists)" == "1" ]; then
        echo -e "    ${GREEN}yarn${RESET} : $(yarn --version)"
    else
        echo -e "    ${BLUE}yarn${RESET} : ${BRIGHT_BLACK}not installed${RESET}"
    fi
}

nva() {
    if [ "$#" == "0" ]; then
        echo -e "${BRIGHT_BLACK}$ npm run verify:apps${RESET}"
        npm run verify:apps
    else
        echo -e "${BRIGHT_BLACK}$ npm run verify:apps:"$@"${RESET}"
        npm run verify:apps:"$@"
    fi
}

nvl() {
    if [ "$#" == "0" ]; then
        echo -e "${BRIGHT_BLACK}$ npm run verify:libs${RESET}"
        npm run verify:libs
    else
        echo -e "${BRIGHT_BLACK}$ npm run verify:libs:"$@"${RESET}"
        npm run verify:libs:"$@"
    fi
}

dv() {
    if [ "$(type -P deno)" ]; then
        local deno_output=""
        readarray -t deno_output <<< "$(deno --version)"
        local deno_bin_version="$(echo "${deno_output[0]}" | sed -e 's/deno //g' -e 's/\s.*//g')"
        local deno_v8_version="${deno_output[1]/v8 /}"
        local deno_ts_version="${deno_output[2]/typescript /}"
        echo -e "    ${GREEN}deno${RESET} : ${deno_bin_version}"
        echo -e "    ${GREEN}  v8${RESET} : ${deno_v8_version}"
        echo -e "    ${GREEN}  ts${RESET} : ${deno_ts_version}"
    else
        echo -e "    ${BLUE}deno${RESET} : ${BRIGHT_BLACK}not installed${RESET}"
    fi
    if [ "$(type -P dvm)" ]; then
        local dvm_output="$(dvm --version)"
        local dvm_version="${dvm_output/dvm /}"
        echo -e "    ${GREEN} dvm${RESET} : ${dvm_version}"
    else
        echo -e "    ${BLUE} dvm${RESET} : ${BRIGHT_BLACK}not installed${RESET}"
    fi
}

if [ "$(is_win)" == "yes" ]; then
    alias npm="cmd /c npm"
fi

# vim: set tw=0:syn=sh :
