#!/usr/bin/env bash

# https://apple.stackexchange.com/questions/371997/suppressing-the-default-interactive-shell-is-now-zsh-message-in-macos-catalina
export BASH_SILENCE_DEPRECATION_WARNING=1

# http://bluebirdjs.com/docs/api/environment-variables.html
export BLUEBIRD_DEBUG="0"

# Where deno should be install to
export DENO_INSTALL="$HOME/.deno"

# Set the display
export DISPLAY=":99"

# Where dvm should be install to
export DVM_DIR="$HOME/.dvm"

# Define were the go apps will be built
export GOPATH="$HOME/Go"

# Define were the go bin lives
export GOROOT="/usr/local/go"

# Suppress any and all node deprecations
# https://nodejs.org/api/cli.html#node_optionsoptions
# Though `NODE_NO_WARNINGS`, exists. Thee is no `NODE_NO_DEPRECATIONS`.
export NODE_OPTIONS="--no-deprecation"

# Where nvm should be install to
export NVM_DIR="$HOME/.nvm"

# Where sdkman should be install to
export SDKMAN_DIR="$HOME/.sdkman"

# Set the chrome bin
if [ "$(type -P google-chrome)" ]; then
    CHROME_BIN="google-chrome"
elif [ "$(type -P chromium-browser)" ]; then
    CHROME_BIN="chromium-browser"
fi

# Fix git dates issues with windows
if [ $($DOTFILES_DIRECTORY/bin/is_win) == "yes" ]; then
    unset TZ;
fi

# If we are running `go` in Cygwin, convert the path to a Windows one
if [ "$($DOTFILES_DIRECTORY/bin/is_win)" == "yes" ]; then
    export GOPATH="`cygpath -aw $GOPATH`"
fi

# Configure the Java environment
if [ "$($DOTFILES_DIRECTORY/bin/is_mac)" == "yes" ]; then
    export ANDROID_TOOLS="$HOME/Library/Android/sdk"
fi

# Fix GPG
if [ "$($DOTFILES_DIRECTORY/bin/is_mac)" == "yes" ]; then
    export GPG_TTY=$(tty)
fi

# Define the java variables if we have it installed
if [ "$(type -P java)" ]; then
    if [ -d "/Library/Java/JavaVirtualMachines/jdk-11.0.17.jdk" ]; then
        export JAVA_HOME="/Library/Java/JavaVirtualMachines/jdk-11.0.17.jdk"
        export JDK_HOME="/Library/Java/JavaVirtualMachines/jdk-11.0.17.jdk"
    elif [ -d "/opt/homebrew/opt/openjdk@11" ]; then
        export JAVA_HOME="/opt/homebrew/opt/openjdk@11"
        export JDK_HOME="/opt/homebrew/opt/openjdk@11"
        if [ ! -L "/Library/Java/JavaVirtualMachines/openjdk-11.jdk" ]; then
            ln -fsn /opt/homebrew/opt/openjdk@11/libexec/openjdk.jdk /Library/Java/JavaVirtualMachines/openjdk.jdk
        fi
    elif [ -d "/opt/homebrew/opt/openjdk" ]; then
        export JAVA_HOME="/opt/homebrew/opt/openjdk"
        export JDK_HOME="/opt/homebrew/opt/openjdk"
        if [ ! -L "/Library/Java/JavaVirtualMachines/openjdk.jdk" ]; then
            ln -fsn /opt/homebrew/opt/openjdk/libexec/openjdk.jdk /Library/Java/JavaVirtualMachines/openjdk.jdk
        fi
    elif [ -f "/usr/libexec/java_home" ]; then
        export JAVA_HOME="$(/usr/libexec/java_home 2>/dev/null)"
        export JDK_HOME="$(/usr/libexec/java_home 2>/dev/null)"
    elif [ -L "/usr/bin/javac" ]; then
        export JAVA_HOME=$(readlink -f /usr/bin/javac | sed "s:/bin/java::")
        export JDK_HOME=$(readlink -f /usr/bin/javac | sed "s:/bin/javac::")
    fi
fi

# vim: set syn=sh :
