#!/usr/bin/env bash

# Determine if the git repo we are in has any changes in the working directory
function parse_git_dirty() {
    [[ $(git status 2> /dev/null | tail -n1) != *"working directory clean"* ]] && echo "*"
    # local git_status=$(git status 2> /dev/null | tail -n1)
    # [[ $git_status && $git_status != *"working directory clean"* ]] && echo "*"
}

# If the current directory belongs is a descendant of a git repo, determine the
# name of branch that is checked out
function parse_git_branch() {
    git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e "s/* \(.*\)/\1$(parse_git_dirty)/"
    # echo "$(git rev-parse --abbrev-ref HEAD 2> /dev/null)""$(parse_git_dirty)"
}

# Determine the look of our prompt. Eg
#
# whitneyit at MacBook in ~/Code/dotfiles on master
# $ echo "Hello world" > hi.txt
# whitneyit at MacBook in ~/Code/dotfiles on master*
# $
export PS1="\[${BOLD}${MAGENTA}\]\u \[$BLACK\]at \[$ORANGE\]\h \[$BLACK\]in \[$YELLOW\]\w\[$BLACK\]\$([[ -n \$(git branch 2> /dev/null) ]] && echo \" on \")\[$PURPLE\]\$(parse_git_branch)\[$BLACK\]\n\$ \[$RESET\]"
export PS1="\[${BOLD}${MAGENTA}\]\u \[$WHITE\]at \[$ORANGE\]\h \[$WHITE\]in \[$YELLOW\]\w\[$WHITE\]\$([[ -n \$(git branch 2> /dev/null) ]] && echo \" on \")\[$PURPLE\]\$(parse_git_branch)\[$WHITE\]\n\$ \[$RESET\]"
export PS2="\[$ORANGE\]â†’ \[$RESET\]"

# vim: set syn=sh :
