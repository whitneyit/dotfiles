#!/usr/bin/env bash

# Where we want to sto
SSH_AGENT_DUMP_FILE="$HOME/.ssh/dump"

# Defines a wrapper to be placed around `ssh-agent`
function start_or_resume_agent() {

    # If we have a dump of our previous SSH config, let's try and resume
    if [ -f "${SSH_AGENT_DUMP_FILE}" ]; then

        # Load up the previous SSH settings
        . "${SSH_AGENT_DUMP_FILE}" > /dev/null

        # Look for the Process ID of the `ssh-agent` else just start another
        ps -ef | command grep "${SSH_AGENT_PID}" | command grep ssh-agent$ > /dev/null || {
            start_agent;
        }

    # We have no previous dump, so lets start a new instance
    else
        start_agent
    fi

}

# Start an instance of `ssh-agent` and save the result to SSH_AGENT_DUMP_FILE
function start_agent() {
    (umask 066; ssh-agent > "${SSH_AGENT_DUMP_FILE}")
    . "${SSH_AGENT_DUMP_FILE}" > /dev/null
}

# Here we read the contents of a file and load up its keys.
function read_keys() {

    # Alias the filepath that was passed in.
    KEYS="$1"

    # Here we save a backup to the old `Internal Feed Seperator`, and we will
    # modify it ot only pickup on new lines.
    OLDIFS=$IFS
    IFS=$'\n'

    # If we have a keys file defined, then we can proceed to extract them. It is
    # important to note that this file does not contain the keys themselves,
    # just the location of where the key is stored. You must use absolute paths
    # when specifying the path.
    if [ -f "$KEYS" ]; then

        # Read the file into a variable
        file="$(cat "$KEYS")"

        # Here we loop over each line in the file
        for line in $file;  do

            # Here we convert the line of the file into a real variable
            key=$(eval echo "$line")

            # Here we test to see if the `key` provided by the `$KEYS`
            # file actually points to a file. If it does we will add it to the
            # `ssh-agent`
            if [ -f "$key" ]; then

                # Only add new keys
                if ! ssh-add -l | grep -q "$(ssh-keygen -lf $key | awk '{print $2}')"; then
                    eval ssh-add "$key"
                fi

            # Log a warning that we could not find the key
            else
                e_error "Could not load key: [$key]"
            fi

        done

    fi

    # Finally we restore the `$IFS` to its previous settings.
    IFS=$OLDIFS

}

# Only do this SSH setup if we are not in a vagrant instance
if [ "$($DOTFILES_DIRECTORY/bin/is_vagrant)" == "no" ]; then

    # Here we fire up `ssh` for every shell
    start_or_resume_agent

    # Read our .keys files.
    read_keys "$HOME/.keys"
    read_keys "$HOME/.keys.local"

fi

# vim: set syn=sh :
