#!/usr/bin/env bash

# If we are in Windows, we don't do any fancy color schemes.
if [ $($DOTFILES_DIRECTORY/bin/is_win) == "no" ]; then

    # It seems that ChromeOS does not play nice with 256 colours. Until that is
    # resolved, it looks like we can't use 256 color mode there.
    if [ "$($DOTFILES_DIRECTORY/bin/is_chromeos)" == "no" ]; then

        # Set 256 color profile where possible
        if [[ $COLORTERM = gnome-* && $TERM = xterm ]] && infocmp gnome-256color >/dev/null 2>&1; then
            export TERM="gnome-256color"
        elif infocmp xterm-256color >/dev/null 2>&1; then
            export TERM="xterm-256color"
        fi

    fi

    # Define some variables for the base16 theme
    export BASE16_THEME="ocean"
    export BASE16_VARIANT="dark"
    export BASE16_FILE="base16-$BASE16_THEME.$BASE16_VARIANT.sh"
    export BASE16_DIRECTORY="$DOTFILES_DIRECTORY/shell/base16-shell"

    # When the active base16 theme is located
    export BASE16_ACTIVE_THEME_PATH="$BASE16_DIRECTORY/$BASE16_FILE"

    # Use the base16 colour scheme
    [[ -s $BASE16_ACTIVE_THEME_PATH ]] && source $BASE16_ACTIVE_THEME_PATH

    # Define the colours to use
    if tput setaf 1 &> /dev/null; then
        tput sgr0
        if [[ $(tput colors) -ge 256 ]] 2>/dev/null; then
            GREY=$(tput setaf 8)
            BLACK=$(tput setaf 0)
            BLUE=$(tput setaf 4)
            CYAN=$(tput setaf 6)
            GREEN=$(tput setaf 2)
            MAGENTA=$(tput setaf 9)
            PURPLE=$(tput setaf 141)
            RED=$(tput setaf 1)
            WHITE=$(tput setaf 255)
            YELLOW=$(tput setaf 190)
            ORANGE=$(tput setaf 172)
        else
            GREY=$(tput setaf 8)
            BLACK=$(tput setaf 0)
            BLUE=$(tput setaf 4)
            CYAN=$(tput setaf 6)
            GREEN=$(tput setaf 2)
            MAGENTA=$(tput setaf 9)
            PURPLE=$(tput setaf 5)
            RED=$(tput setaf 1)
            WHITE=$(tput setaf 7)
            YELLOW=$(tput setaf 3)
            ORANGE=$RED
        fi
        RESET=$(tput sgr0)
    else
        BLACK="\033[1;30m"
        MAGENTA="\033[1;31m"
        ORANGE="\033[1;33m"
        GREEN="\033[1;32m"
        PURPLE="\033[1;35m"
        WHITE="\033[1;37m"
        RESET="\033[m"
    fi

else

    BLACK="\033[1;30m"
    MAGENTA="\033[1;31m"
    ORANGE="\033[1;33m"
    GREEN="\033[1;32m"
    PURPLE="\033[1;35m"
    WHITE="\033[1;37m"
    RESET="\033[m"

fi

export GREY
export BLACK
export MAGENTA
export ORANGE
export GREEN
export PURPLE
export WHITE
export RESET

function is_svn_repository {
    svn log > /dev/null 2>&1
}

function is_hg_repository {
    hg branch > /dev/null 2>&1
}

function is_git_repository {
    git branch > /dev/null 2>&1
}

# If the current directory belongs is a descendant of a git repo, determine the
# name of branch that is checked out
function _git_prompt() {
    STATUS="$(git status 2> /dev/null | tail -n1)"
    IS_DIRTY=""
    if [[ $STATUS != *"working directory clean"* && $STATUS != *"working tree clean"* ]]; then
        IS_DIRTY="*"
    fi
    git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e "s/* \(.*\)/\1$IS_DIRTY/"
}

function _hg_prompt() {
    STATUS="$(hg status 2> /dev/null)"
    IS_DIRTY=""
    if [[ $STATUS != "" ]]; then
        IS_DIRTY="*"
    fi
    hg branch 2> /dev/null | sed -e "s/\(.*\)/\1$IS_DIRTY/"
}

function _svn_prompt() {
    REVISION="$(svn info 2> /dev/null | grep Revision | grep -Eo '[0-9]+$')"
    STATUS="$(svn status 2> /dev/null)"
    IS_DIRTY=""
    if [[ $STATUS != "" ]]; then
        IS_DIRTY="*"
    fi
    echo "$REVISION$IS_DIRTY"
}

function get_prompt() {
    PROMPT=""
    if is_git_repository ; then
        PROMPT="$WHITE on $PURPLE$(_git_prompt)"
    elif  is_hg_repository ; then
        PROMPT="$WHITE on $GREEN$(_hg_prompt)"
    elif  is_svn_repository ; then
        PROMPT="$WHITE on $BLUE$(_svn_prompt)"
    fi
    echo "$PROMPT"
}

# If we are using MING, then we do nothing otherwise we set the $PS1
if [ $($DOTFILES_DIRECTORY/bin/is_ming) == "no" ]; then
    export PS1="\[$MAGENTA\]\u \[$WHITE\]at \[$ORANGE\]\h \[$WHITE\]in \[$YELLOW\]\w\$(get_prompt)\n\[$WHITE\]\$ \[$RESET\]"
fi

# vim: set syn=sh :
